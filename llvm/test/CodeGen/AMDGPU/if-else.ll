; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5
; RUN: llc -mtriple=amdgcn -mcpu=gfx900 -verify-machineinstrs < %s | FileCheck -check-prefix=GFX900 %s

define amdgpu_kernel void @test_extractelement_then_else(<4 x i32> %vec, i1 %cond, ptr %ptr) {
; GFX900-LABEL: test_extractelement_then_else:
; GFX900:       ; %bb.0: ; %if
; GFX900-NEXT:    s_load_dword s6, s[4:5], 0x34
; GFX900-NEXT:    s_load_dwordx4 s[0:3], s[4:5], 0x24
; GFX900-NEXT:    s_waitcnt lgkmcnt(0)
; GFX900-NEXT:    s_bitcmp0_b32 s6, 0
; GFX900-NEXT:    s_cbranch_scc0 .LBB0_2
; GFX900-NEXT:  ; %bb.1: ; %else
; GFX900-NEXT:    s_cbranch_execz .LBB0_3
; GFX900-NEXT:    s_branch .LBB0_4
; GFX900-NEXT:  .LBB0_2:
; GFX900-NEXT:  .LBB0_3: ; %then
; GFX900-NEXT:    s_add_i32 s1, s1, 1
; GFX900-NEXT:  .LBB0_4: ; %merge
; GFX900-NEXT:    s_load_dwordx2 s[2:3], s[4:5], 0x3c
; GFX900-NEXT:    v_mov_b32_e32 v2, s1
; GFX900-NEXT:    s_waitcnt lgkmcnt(0)
; GFX900-NEXT:    v_mov_b32_e32 v0, s2
; GFX900-NEXT:    v_mov_b32_e32 v1, s3
; GFX900-NEXT:    flat_store_dword v[0:1], v2
; GFX900-NEXT:    s_endpgm
if:
  br i1 %cond, label %then, label %else

then:
  %x = extractelement <4 x i32> %vec, i32 1
  %y = add i32 %x, 1
  %vec1 =  insertelement <4 x i32>  poison, i32 %y,  i32 0
  %z = extractelement <4 x i32> %vec1, i32 0
  br label %merge

else:
  %a = extractelement <4 x i32> %vec, i32 1
  br label %merge

merge:
  %phi = phi i32 [ %z, %then ], [ %a, %else ]
  store i32 %phi, ptr  %ptr
  ret void
}

define amdgpu_kernel void @test_extractelement_else_then(<4 x i32> %vec, i1 %cond, ptr %ptr) {
; GFX900-LABEL: test_extractelement_else_then:
; GFX900:       ; %bb.0: ; %if
; GFX900-NEXT:    s_load_dword s6, s[4:5], 0x34
; GFX900-NEXT:    s_load_dwordx4 s[0:3], s[4:5], 0x24
; GFX900-NEXT:    s_waitcnt lgkmcnt(0)
; GFX900-NEXT:    s_bitcmp0_b32 s6, 0
; GFX900-NEXT:    s_cbranch_scc1 .LBB1_2
; GFX900-NEXT:  ; %bb.1: ; %else
; GFX900-NEXT:    s_cbranch_execz .LBB1_3
; GFX900-NEXT:    s_branch .LBB1_4
; GFX900-NEXT:  .LBB1_2:
; GFX900-NEXT:  .LBB1_3: ; %then
; GFX900-NEXT:    s_add_i32 s1, s1, 1
; GFX900-NEXT:  .LBB1_4: ; %merge
; GFX900-NEXT:    s_load_dwordx2 s[2:3], s[4:5], 0x3c
; GFX900-NEXT:    v_mov_b32_e32 v2, s1
; GFX900-NEXT:    s_waitcnt lgkmcnt(0)
; GFX900-NEXT:    v_mov_b32_e32 v0, s2
; GFX900-NEXT:    v_mov_b32_e32 v1, s3
; GFX900-NEXT:    flat_store_dword v[0:1], v2
; GFX900-NEXT:    s_endpgm
if:
  br i1 %cond, label %else, label %then

else:
  %a = extractelement <4 x i32> %vec, i32 1
  br label %merge

then:
  %x = extractelement <4 x i32> %vec, i32 1
  %y = add i32 %x, 1
  %vec1 =  insertelement <4 x i32>  poison, i32 %y,  i32 0
  %z = extractelement <4 x i32> %vec1, i32 0
  br label %merge

merge:
  %phi = phi i32 [ %z, %then ], [ %a, %else ]
  store i32 %phi, ptr  %ptr
  ret void
}

%pair = type { i32, i32 }

define void @test_extractvalue_then_else(ptr %ptr, i1 %cond) {
; GFX900-LABEL: test_extractvalue_then_else:
; GFX900:       ; %bb.0: ; %if
; GFX900-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX900-NEXT:    flat_load_dword v3, v[0:1]
; GFX900-NEXT:    v_and_b32_e32 v2, 1, v2
; GFX900-NEXT:    v_cmp_eq_u32_e32 vcc, 1, v2
; GFX900-NEXT:    s_and_saveexec_b64 s[4:5], vcc
; GFX900-NEXT:    s_xor_b64 s[4:5], exec, s[4:5]
; GFX900-NEXT:    s_andn2_saveexec_b64 s[4:5], s[4:5]
; GFX900-NEXT:    s_cbranch_execz .LBB2_2
; GFX900-NEXT:  ; %bb.1: ; %else
; GFX900-NEXT:    s_waitcnt vmcnt(0) lgkmcnt(0)
; GFX900-NEXT:    v_add_u32_e32 v3, 1, v3
; GFX900-NEXT:  .LBB2_2: ; %merge
; GFX900-NEXT:    s_or_b64 exec, exec, s[4:5]
; GFX900-NEXT:    s_waitcnt vmcnt(0) lgkmcnt(0)
; GFX900-NEXT:    flat_store_dword v[0:1], v3
; GFX900-NEXT:    s_waitcnt vmcnt(0) lgkmcnt(0)
; GFX900-NEXT:    s_setpc_b64 s[30:31]
if:
  %load_then = load %pair, ptr %ptr
  br i1 %cond, label %then, label %else

then:
  %a_then = extractvalue %pair %load_then, 0
  br label %merge

else:
  %a_else = extractvalue %pair %load_then, 0
  %sum_else = add i32 %a_else, 1
  br label %merge

merge:
  %phi = phi i32  [ %a_then, %then ], [ %sum_else, %else ]
  store i32 %phi, ptr  %ptr
  ret void
}

define void @test_extractvalue_else_then(ptr %ptr, i1 %cond) {
; GFX900-LABEL: test_extractvalue_else_then:
; GFX900:       ; %bb.0: ; %if
; GFX900-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX900-NEXT:    flat_load_dword v3, v[0:1]
; GFX900-NEXT:    v_and_b32_e32 v2, 1, v2
; GFX900-NEXT:    v_cmp_ne_u32_e32 vcc, 1, v2
; GFX900-NEXT:    s_and_saveexec_b64 s[4:5], vcc
; GFX900-NEXT:    s_xor_b64 s[4:5], exec, s[4:5]
; GFX900-NEXT:    s_andn2_saveexec_b64 s[4:5], s[4:5]
; GFX900-NEXT:    s_cbranch_execz .LBB3_2
; GFX900-NEXT:  ; %bb.1: ; %else
; GFX900-NEXT:    s_waitcnt vmcnt(0) lgkmcnt(0)
; GFX900-NEXT:    v_add_u32_e32 v3, 1, v3
; GFX900-NEXT:  .LBB3_2: ; %merge
; GFX900-NEXT:    s_or_b64 exec, exec, s[4:5]
; GFX900-NEXT:    s_waitcnt vmcnt(0) lgkmcnt(0)
; GFX900-NEXT:    flat_store_dword v[0:1], v3
; GFX900-NEXT:    s_waitcnt vmcnt(0) lgkmcnt(0)
; GFX900-NEXT:    s_setpc_b64 s[30:31]
if:
  %load_then = load %pair, ptr %ptr
  br i1 %cond, label %else, label %then

else:
  %a_else = extractvalue %pair %load_then, 0
  %sum_else = add i32 %a_else, 1
  br label %merge

then:
  %a_then = extractvalue %pair %load_then, 0
  br label %merge

merge:
  %phi = phi i32  [ %a_then, %then ], [ %sum_else, %else ]
  store i32 %phi, ptr  %ptr
  ret void
}
