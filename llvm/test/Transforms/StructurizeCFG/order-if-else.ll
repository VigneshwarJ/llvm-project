; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 5
; RUN: opt -S -structurizecfg %s -o - | FileCheck %s
; RUN: opt -S -passes=structurizecfg %s -o - | FileCheck %s

define amdgpu_kernel void @test_extractelement_1(<4 x i32> %vec, i1 %cond, ptr %ptr) {
; CHECK-LABEL: define amdgpu_kernel void @test_extractelement_1(
; CHECK-SAME: <4 x i32> [[VEC:%.*]], i1 [[COND:%.*]], ptr [[PTR:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*]]:
; CHECK-NEXT:    [[COND_INV:%.*]] = xor i1 [[COND]], true
; CHECK-NEXT:    br i1 [[COND_INV]], label %[[ELSE:.*]], label %[[FLOW:.*]]
; CHECK:       [[FLOW]]:
; CHECK-NEXT:    [[TMP0:%.*]] = phi i32 [ [[A:%.*]], %[[ELSE]] ], [ poison, %[[ENTRY]] ]
; CHECK-NEXT:    [[TMP1:%.*]] = phi i1 [ false, %[[ELSE]] ], [ true, %[[ENTRY]] ]
; CHECK-NEXT:    br i1 [[TMP1]], label %[[THEN:.*]], label %[[MERGE:.*]]
; CHECK:       [[THEN]]:
; CHECK-NEXT:    [[X:%.*]] = extractelement <4 x i32> [[VEC]], i32 0
; CHECK-NEXT:    [[Z:%.*]] = add i32 [[X]], 1
; CHECK-NEXT:    br label %[[MERGE]]
; CHECK:       [[ELSE]]:
; CHECK-NEXT:    [[A]] = extractelement <4 x i32> [[VEC]], i32 1
; CHECK-NEXT:    br label %[[FLOW]]
; CHECK:       [[MERGE]]:
; CHECK-NEXT:    [[PHI:%.*]] = phi i32 [ [[TMP0]], %[[FLOW]] ], [ [[Z]], %[[THEN]] ]
; CHECK-NEXT:    store i32 [[PHI]], ptr [[PTR]], align 4
; CHECK-NEXT:    ret void
;
entry:
  br i1 %cond, label %then, label %else

then:
  %x = extractelement <4 x i32> %vec, i32 0
  %z = add i32 %x, 1
  br label %merge

else:
  %a = extractelement <4 x i32> %vec, i32 1
  br label %merge

merge:
  %phi = phi i32 [ %z, %then ], [ %a, %else ]
  store i32 %phi, ptr  %ptr
  ret void
}

define amdgpu_kernel void @test_extractelement_2(<4 x i32> %vec, i1 %cond, ptr %ptr) {
; CHECK-LABEL: define amdgpu_kernel void @test_extractelement_2(
; CHECK-SAME: <4 x i32> [[VEC:%.*]], i1 [[COND:%.*]], ptr [[PTR:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*]]:
; CHECK-NEXT:    [[COND_INV:%.*]] = xor i1 [[COND]], true
; CHECK-NEXT:    br i1 [[COND_INV]], label %[[ELSE:.*]], label %[[FLOW:.*]]
; CHECK:       [[FLOW]]:
; CHECK-NEXT:    [[TMP0:%.*]] = phi i32 [ [[A:%.*]], %[[ELSE]] ], [ poison, %[[ENTRY]] ]
; CHECK-NEXT:    [[TMP1:%.*]] = phi i1 [ false, %[[ELSE]] ], [ true, %[[ENTRY]] ]
; CHECK-NEXT:    br i1 [[TMP1]], label %[[THEN:.*]], label %[[MERGE:.*]]
; CHECK:       [[THEN]]:
; CHECK-NEXT:    [[X:%.*]] = extractelement <4 x i32> [[VEC]], i32 1
; CHECK-NEXT:    [[Y:%.*]] = add i32 [[X]], 1
; CHECK-NEXT:    [[VEC1:%.*]] = insertelement <4 x i32> poison, i32 [[Y]], i32 0
; CHECK-NEXT:    [[Z:%.*]] = extractelement <4 x i32> [[VEC1]], i32 0
; CHECK-NEXT:    br label %[[MERGE]]
; CHECK:       [[ELSE]]:
; CHECK-NEXT:    [[A]] = extractelement <4 x i32> [[VEC]], i32 1
; CHECK-NEXT:    br label %[[FLOW]]
; CHECK:       [[MERGE]]:
; CHECK-NEXT:    [[PHI:%.*]] = phi i32 [ [[TMP0]], %[[FLOW]] ], [ [[Z]], %[[THEN]] ]
; CHECK-NEXT:    store i32 [[PHI]], ptr [[PTR]], align 4
; CHECK-NEXT:    ret void
;
entry:
  br i1 %cond, label %then, label %else

then:
  %x = extractelement <4 x i32> %vec, i32 1
  %y = add i32 %x, 1
  %vec1 =  insertelement <4 x i32>  poison, i32 %y,  i32 0
  %z = extractelement <4 x i32> %vec1, i32 0
  br label %merge

else:
  %a = extractelement <4 x i32> %vec, i32 1
  br label %merge

merge:
  %phi = phi i32 [ %z, %then ], [ %a, %else ]
  store i32 %phi, ptr  %ptr
  ret void
}

%pair = type { i32, i32 }
define amdgpu_kernel void @test_extractvalue(ptr %ptr, i1 %cond) {
; CHECK-LABEL: define amdgpu_kernel void @test_extractvalue(
; CHECK-SAME: ptr [[PTR:%.*]], i1 [[COND:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*]]:
; CHECK-NEXT:    [[LOAD_THEN:%.*]] = load [[PAIR:%.*]], ptr [[PTR]], align 4
; CHECK-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[FLOW:.*]]
; CHECK:       [[THEN]]:
; CHECK-NEXT:    [[A_THEN:%.*]] = extractvalue [[PAIR]] [[LOAD_THEN]], 0
; CHECK-NEXT:    br label %[[FLOW]]
; CHECK:       [[FLOW]]:
; CHECK-NEXT:    [[TMP0:%.*]] = phi i32 [ [[A_THEN]], %[[THEN]] ], [ poison, %[[ENTRY]] ]
; CHECK-NEXT:    [[TMP1:%.*]] = phi i1 [ false, %[[THEN]] ], [ true, %[[ENTRY]] ]
; CHECK-NEXT:    br i1 [[TMP1]], label %[[ELSE:.*]], label %[[MERGE:.*]]
; CHECK:       [[ELSE]]:
; CHECK-NEXT:    [[A_ELSE:%.*]] = extractvalue [[PAIR]] [[LOAD_THEN]], 0
; CHECK-NEXT:    [[SUM_ELSE:%.*]] = add i32 [[A_ELSE]], 1
; CHECK-NEXT:    br label %[[MERGE]]
; CHECK:       [[MERGE]]:
; CHECK-NEXT:    [[PHI:%.*]] = phi i32 [ [[TMP0]], %[[FLOW]] ], [ [[SUM_ELSE]], %[[ELSE]] ]
; CHECK-NEXT:    store i32 [[PHI]], ptr [[PTR]], align 4
; CHECK-NEXT:    ret void
;
entry:
  %load_then = load %pair, ptr %ptr
  br i1 %cond, label %then, label %else

then:
  %a_then = extractvalue %pair %load_then, 0
  br label %merge

else:
  %a_else = extractvalue %pair %load_then, 0
  %sum_else = add i32 %a_else, 1
  br label %merge

merge:
  %phi = phi i32  [ %a_then, %then ], [ %sum_else, %else ]
  store i32 %phi, ptr  %ptr
  ret void
}
